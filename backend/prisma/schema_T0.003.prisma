// schema_T0.003.prisma
// Prisma schema file for Sysdesk - Sprint 0 Task T0.003
// Complete database structure for multi-tenant support chat platform

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ====================
// Base Tables (S0/S1)
// ====================

// Multi-tenant company structure
model Company {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique // URL-friendly identifier
  cnpj        String?   @unique // Brazilian company document (encrypted in production)
  phone       String?
  email       String?
  address     String?   @db.Text
  isActive    Boolean   @default(true)
  settings    Json?     // Company-specific settings
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? // Soft delete for LGPD

  // Relations
  users       User[]
  invites     Invite[]
  auditLogs   AuditLog[]

  @@index([slug])
  @@index([isActive])
  @@map("companies")
}

// User accounts with RBAC
model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String    // bcrypt hashed
  name              String
  phone             String?
  avatar            String?
  role              Role      @default(CLIENTE)
  isActive          Boolean   @default(true)
  isEmailVerified   Boolean   @default(false)
  lastLoginAt       DateTime?
  companyId         String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime? // Soft delete for LGPD

  // Relations
  company           Company   @relation(fields: [companyId], references: [id])
  sessions          Session[]
  invitesSent       Invite[]  @relation("InviteSender")
  invitesUsed       Invite?   @relation("InviteUser")
  auditLogs         AuditLog[]

  @@index([companyId])
  @@index([email])
  @@index([role])
  @@index([isActive])
  @@map("users")
}

// Invite tokens for registration
model Invite {
  id          String    @id @default(uuid())
  token       String    @unique @default(cuid())
  email       String
  role        Role      @default(CLIENTE)
  companyId   String
  invitedById String
  usedById    String?   @unique
  expiresAt   DateTime
  usedAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  company     Company   @relation(fields: [companyId], references: [id])
  invitedBy   User      @relation("InviteSender", fields: [invitedById], references: [id])
  usedBy      User?     @relation("InviteUser", fields: [usedById], references: [id])

  @@index([token])
  @@index([email])
  @@index([companyId])
  @@index([expiresAt])
  @@map("invites")
}

// Session management for JWT refresh tokens
model Session {
  id            String    @id @default(uuid())
  userId        String
  refreshToken  String    @unique @db.Text
  userAgent     String?   @db.Text
  ipAddress     String?
  isValid       Boolean   @default(true)
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([refreshToken(length: 255)])
  @@index([expiresAt])
  @@map("sessions")
}

// Audit logs for LGPD compliance
model AuditLog {
  id          String    @id @default(uuid())
  action      String    // LOGIN, LOGOUT, CREATE, UPDATE, DELETE, EXPORT, VIEW_PII
  entityType  String    // User, Company, Conversation, etc.
  entityId    String?
  userId      String?
  companyId   String?
  metadata    Json?     // Additional context
  ipAddress   String?
  userAgent   String?   @db.Text
  createdAt   DateTime  @default(now())

  // Relations
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  company     Company?  @relation(fields: [companyId], references: [id], onDelete: SetNull)

  @@index([action])
  @@index([entityType])
  @@index([userId])
  @@index([companyId])
  @@index([createdAt])
  @@map("audit_logs")
}

// User roles enumeration
enum Role {
  MASTER_ADMIN // System-wide admin (BR SISTEMAS)
  ADMIN        // Company admin
  OPERADOR     // Support operator/agent
  CLIENTE      // End client
}
