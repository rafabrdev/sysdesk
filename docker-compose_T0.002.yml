# docker-compose.yml_T0.002
# Docker Compose configuration for Sysdesk - Sprint 0 Task T0.002
# Orchestrates all services: MariaDB, Redis, Backend, Frontend, NGINX

version: '3.9'

services:
  # =================
  # Database Service
  # =================
  db:
    image: mariadb:11
    container_name: sysdesk-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootpass}
      MYSQL_DATABASE: ${DB_NAME:-sysdesk}
      MYSQL_USER: ${DB_USER:-sysdesk}
      MYSQL_PASSWORD: ${DB_PASSWORD:-sysdesk}
      TZ: ${TZ:-America/Sao_Paulo}
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - db_data:/var/lib/mysql
      - ./ops/database/init:/docker-entrypoint-initdb.d
    networks:
      - sysdesk-network
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5

  # =================
  # Cache/Queue Service
  # =================
  redis:
    image: redis:7-alpine
    container_name: sysdesk-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - sysdesk-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =================
  # Backend Service
  # =================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-development}
    container_name: sysdesk-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${BACKEND_PORT:-3333}
      DATABASE_URL: mysql://${DB_USER:-sysdesk}:${DB_PASSWORD:-sysdesk}@db:3306/${DB_NAME:-sysdesk}
      REDIS_URL: redis://:${REDIS_PASSWORD:-}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-change_me}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-change_me_too}
      TZ: ${TZ:-America/Sao_Paulo}
    ports:
      - "${BACKEND_PORT:-3333}:3333"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/dist:/app/dist
    networks:
      - sysdesk-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =================
  # Frontend Service
  # =================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-development}
    container_name: sysdesk-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost/api}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost/socket.io}
      TZ: ${TZ:-America/Sao_Paulo}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - sysdesk-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =================
  # Reverse Proxy
  # =================
  nginx:
    image: nginx:alpine
    container_name: sysdesk-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./ops/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ops/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ops/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    networks:
      - sysdesk-network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# =================
# Networks
# =================
networks:
  sysdesk-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

# =================
# Volumes
# =================
volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
  nginx_cache:
    driver: local
